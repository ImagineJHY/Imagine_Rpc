// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Context.proto

#ifndef PROTOBUF_Context_2eproto__INCLUDED
#define PROTOBUF_Context_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Imagine_Rpc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Context_2eproto();
void protobuf_AssignDesc_Context_2eproto();
void protobuf_ShutdownFile_Context_2eproto();

class Context;

// ===================================================================

class Context : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Imagine_Rpc.Context) */ {
 public:
  Context();
  virtual ~Context();

  Context(const Context& from);

  inline Context& operator=(const Context& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Context& default_instance();

  void Swap(Context* other);

  // implements Message ----------------------------------------------

  inline Context* New() const { return New(NULL); }

  Context* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Context& from);
  void MergeFrom(const Context& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Context* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string service_name_ = 1;
  void clear_service_name_();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name_() const;
  void set_service_name_(const ::std::string& value);
  void set_service_name_(const char* value);
  void set_service_name_(const char* value, size_t size);
  ::std::string* mutable_service_name_();
  ::std::string* release_service_name_();
  void set_allocated_service_name_(::std::string* service_name_);

  // optional string method_name_ = 2;
  void clear_method_name_();
  static const int kMethodNameFieldNumber = 2;
  const ::std::string& method_name_() const;
  void set_method_name_(const ::std::string& value);
  void set_method_name_(const char* value);
  void set_method_name_(const char* value, size_t size);
  ::std::string* mutable_method_name_();
  ::std::string* release_method_name_();
  void set_allocated_method_name_(::std::string* method_name_);

  // optional uint64 message_size_ = 3;
  void clear_message_size_();
  static const int kMessageSizeFieldNumber = 3;
  ::google::protobuf::uint64 message_size_() const;
  void set_message_size_(::google::protobuf::uint64 value);

  // optional string send_ip_ = 4;
  void clear_send_ip_();
  static const int kSendIpFieldNumber = 4;
  const ::std::string& send_ip_() const;
  void set_send_ip_(const ::std::string& value);
  void set_send_ip_(const char* value);
  void set_send_ip_(const char* value, size_t size);
  ::std::string* mutable_send_ip_();
  ::std::string* release_send_ip_();
  void set_allocated_send_ip_(::std::string* send_ip_);

  // optional string send_port_ = 5;
  void clear_send_port_();
  static const int kSendPortFieldNumber = 5;
  const ::std::string& send_port_() const;
  void set_send_port_(const ::std::string& value);
  void set_send_port_(const char* value);
  void set_send_port_(const char* value, size_t size);
  ::std::string* mutable_send_port_();
  ::std::string* release_send_port_();
  void set_allocated_send_port_(::std::string* send_port_);

  // optional string recv_ip_ = 6;
  void clear_recv_ip_();
  static const int kRecvIpFieldNumber = 6;
  const ::std::string& recv_ip_() const;
  void set_recv_ip_(const ::std::string& value);
  void set_recv_ip_(const char* value);
  void set_recv_ip_(const char* value, size_t size);
  ::std::string* mutable_recv_ip_();
  ::std::string* release_recv_ip_();
  void set_allocated_recv_ip_(::std::string* recv_ip_);

  // optional string recv_port_ = 7;
  void clear_recv_port_();
  static const int kRecvPortFieldNumber = 7;
  const ::std::string& recv_port_() const;
  void set_recv_port_(const ::std::string& value);
  void set_recv_port_(const char* value);
  void set_recv_port_(const char* value, size_t size);
  ::std::string* mutable_recv_port_();
  ::std::string* release_recv_port_();
  void set_allocated_recv_port_(::std::string* recv_port_);

  // optional int32 sockfd_ = 8;
  void clear_sockfd_();
  static const int kSockfdFieldNumber = 8;
  ::google::protobuf::int32 sockfd_() const;
  void set_sockfd_(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Imagine_Rpc.Context)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr service_name__;
  ::google::protobuf::internal::ArenaStringPtr method_name__;
  ::google::protobuf::uint64 message_size__;
  ::google::protobuf::internal::ArenaStringPtr send_ip__;
  ::google::protobuf::internal::ArenaStringPtr send_port__;
  ::google::protobuf::internal::ArenaStringPtr recv_ip__;
  ::google::protobuf::internal::ArenaStringPtr recv_port__;
  ::google::protobuf::int32 sockfd__;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Context_2eproto();
  friend void protobuf_AssignDesc_Context_2eproto();
  friend void protobuf_ShutdownFile_Context_2eproto();

  void InitAsDefaultInstance();
  static Context* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Context

// optional string service_name_ = 1;
inline void Context::clear_service_name_() {
  service_name__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Context::service_name_() const {
  // @@protoc_insertion_point(field_get:Imagine_Rpc.Context.service_name_)
  return service_name__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_service_name_(const ::std::string& value) {
  
  service_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Imagine_Rpc.Context.service_name_)
}
inline void Context::set_service_name_(const char* value) {
  
  service_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Imagine_Rpc.Context.service_name_)
}
inline void Context::set_service_name_(const char* value, size_t size) {
  
  service_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Imagine_Rpc.Context.service_name_)
}
inline ::std::string* Context::mutable_service_name_() {
  
  // @@protoc_insertion_point(field_mutable:Imagine_Rpc.Context.service_name_)
  return service_name__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Context::release_service_name_() {
  // @@protoc_insertion_point(field_release:Imagine_Rpc.Context.service_name_)
  
  return service_name__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_allocated_service_name_(::std::string* service_name_) {
  if (service_name_ != NULL) {
    
  } else {
    
  }
  service_name__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name_);
  // @@protoc_insertion_point(field_set_allocated:Imagine_Rpc.Context.service_name_)
}

// optional string method_name_ = 2;
inline void Context::clear_method_name_() {
  method_name__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Context::method_name_() const {
  // @@protoc_insertion_point(field_get:Imagine_Rpc.Context.method_name_)
  return method_name__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_method_name_(const ::std::string& value) {
  
  method_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Imagine_Rpc.Context.method_name_)
}
inline void Context::set_method_name_(const char* value) {
  
  method_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Imagine_Rpc.Context.method_name_)
}
inline void Context::set_method_name_(const char* value, size_t size) {
  
  method_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Imagine_Rpc.Context.method_name_)
}
inline ::std::string* Context::mutable_method_name_() {
  
  // @@protoc_insertion_point(field_mutable:Imagine_Rpc.Context.method_name_)
  return method_name__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Context::release_method_name_() {
  // @@protoc_insertion_point(field_release:Imagine_Rpc.Context.method_name_)
  
  return method_name__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_allocated_method_name_(::std::string* method_name_) {
  if (method_name_ != NULL) {
    
  } else {
    
  }
  method_name__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name_);
  // @@protoc_insertion_point(field_set_allocated:Imagine_Rpc.Context.method_name_)
}

// optional uint64 message_size_ = 3;
inline void Context::clear_message_size_() {
  message_size__ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Context::message_size_() const {
  // @@protoc_insertion_point(field_get:Imagine_Rpc.Context.message_size_)
  return message_size__;
}
inline void Context::set_message_size_(::google::protobuf::uint64 value) {
  
  message_size__ = value;
  // @@protoc_insertion_point(field_set:Imagine_Rpc.Context.message_size_)
}

// optional string send_ip_ = 4;
inline void Context::clear_send_ip_() {
  send_ip__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Context::send_ip_() const {
  // @@protoc_insertion_point(field_get:Imagine_Rpc.Context.send_ip_)
  return send_ip__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_send_ip_(const ::std::string& value) {
  
  send_ip__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Imagine_Rpc.Context.send_ip_)
}
inline void Context::set_send_ip_(const char* value) {
  
  send_ip__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Imagine_Rpc.Context.send_ip_)
}
inline void Context::set_send_ip_(const char* value, size_t size) {
  
  send_ip__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Imagine_Rpc.Context.send_ip_)
}
inline ::std::string* Context::mutable_send_ip_() {
  
  // @@protoc_insertion_point(field_mutable:Imagine_Rpc.Context.send_ip_)
  return send_ip__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Context::release_send_ip_() {
  // @@protoc_insertion_point(field_release:Imagine_Rpc.Context.send_ip_)
  
  return send_ip__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_allocated_send_ip_(::std::string* send_ip_) {
  if (send_ip_ != NULL) {
    
  } else {
    
  }
  send_ip__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), send_ip_);
  // @@protoc_insertion_point(field_set_allocated:Imagine_Rpc.Context.send_ip_)
}

// optional string send_port_ = 5;
inline void Context::clear_send_port_() {
  send_port__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Context::send_port_() const {
  // @@protoc_insertion_point(field_get:Imagine_Rpc.Context.send_port_)
  return send_port__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_send_port_(const ::std::string& value) {
  
  send_port__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Imagine_Rpc.Context.send_port_)
}
inline void Context::set_send_port_(const char* value) {
  
  send_port__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Imagine_Rpc.Context.send_port_)
}
inline void Context::set_send_port_(const char* value, size_t size) {
  
  send_port__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Imagine_Rpc.Context.send_port_)
}
inline ::std::string* Context::mutable_send_port_() {
  
  // @@protoc_insertion_point(field_mutable:Imagine_Rpc.Context.send_port_)
  return send_port__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Context::release_send_port_() {
  // @@protoc_insertion_point(field_release:Imagine_Rpc.Context.send_port_)
  
  return send_port__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_allocated_send_port_(::std::string* send_port_) {
  if (send_port_ != NULL) {
    
  } else {
    
  }
  send_port__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), send_port_);
  // @@protoc_insertion_point(field_set_allocated:Imagine_Rpc.Context.send_port_)
}

// optional string recv_ip_ = 6;
inline void Context::clear_recv_ip_() {
  recv_ip__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Context::recv_ip_() const {
  // @@protoc_insertion_point(field_get:Imagine_Rpc.Context.recv_ip_)
  return recv_ip__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_recv_ip_(const ::std::string& value) {
  
  recv_ip__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Imagine_Rpc.Context.recv_ip_)
}
inline void Context::set_recv_ip_(const char* value) {
  
  recv_ip__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Imagine_Rpc.Context.recv_ip_)
}
inline void Context::set_recv_ip_(const char* value, size_t size) {
  
  recv_ip__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Imagine_Rpc.Context.recv_ip_)
}
inline ::std::string* Context::mutable_recv_ip_() {
  
  // @@protoc_insertion_point(field_mutable:Imagine_Rpc.Context.recv_ip_)
  return recv_ip__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Context::release_recv_ip_() {
  // @@protoc_insertion_point(field_release:Imagine_Rpc.Context.recv_ip_)
  
  return recv_ip__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_allocated_recv_ip_(::std::string* recv_ip_) {
  if (recv_ip_ != NULL) {
    
  } else {
    
  }
  recv_ip__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_ip_);
  // @@protoc_insertion_point(field_set_allocated:Imagine_Rpc.Context.recv_ip_)
}

// optional string recv_port_ = 7;
inline void Context::clear_recv_port_() {
  recv_port__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Context::recv_port_() const {
  // @@protoc_insertion_point(field_get:Imagine_Rpc.Context.recv_port_)
  return recv_port__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_recv_port_(const ::std::string& value) {
  
  recv_port__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Imagine_Rpc.Context.recv_port_)
}
inline void Context::set_recv_port_(const char* value) {
  
  recv_port__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Imagine_Rpc.Context.recv_port_)
}
inline void Context::set_recv_port_(const char* value, size_t size) {
  
  recv_port__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Imagine_Rpc.Context.recv_port_)
}
inline ::std::string* Context::mutable_recv_port_() {
  
  // @@protoc_insertion_point(field_mutable:Imagine_Rpc.Context.recv_port_)
  return recv_port__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Context::release_recv_port_() {
  // @@protoc_insertion_point(field_release:Imagine_Rpc.Context.recv_port_)
  
  return recv_port__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_allocated_recv_port_(::std::string* recv_port_) {
  if (recv_port_ != NULL) {
    
  } else {
    
  }
  recv_port__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_port_);
  // @@protoc_insertion_point(field_set_allocated:Imagine_Rpc.Context.recv_port_)
}

// optional int32 sockfd_ = 8;
inline void Context::clear_sockfd_() {
  sockfd__ = 0;
}
inline ::google::protobuf::int32 Context::sockfd_() const {
  // @@protoc_insertion_point(field_get:Imagine_Rpc.Context.sockfd_)
  return sockfd__;
}
inline void Context::set_sockfd_(::google::protobuf::int32 value) {
  
  sockfd__ = value;
  // @@protoc_insertion_point(field_set:Imagine_Rpc.Context.sockfd_)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Imagine_Rpc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Context_2eproto__INCLUDED
